import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:deadhour/backup/utils/theme.dart';
import 'package:deadhour/backup/utils/mock_data.dart';
import 'package:deadhour/backup/utils/auth_helpers.dart';
import '../../widgets/common/deal_card.dart';
import '../../widgets/common/dead_hour_app_bar.dart';
import '../../services/cultural_calendar_service.dart';
import '../../services/social_validation_service.dart';

class VenueDetailScreen extends ConsumerStatefulWidget {
  final String venueId;

  const VenueDetailScreen({
    super.key,
    required this.venueId,
  });

  @override
  ConsumerState<VenueDetailScreen> createState() => _VenueDetailScreenState();
}

class _VenueDetailScreenState extends ConsumerState<VenueDetailScreen>
    with TickerProviderStateMixin {
  late TabController _tabController;
  bool _isBookmarked = false;
  final _culturalCalendar = CulturalCalendarService();
  final _socialValidation = SocialValidationService();

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final venue = _getVenueById(widget.venueId);
    if (venue == null) {
      return const Scaffold(
        appBar: DeadHourAppBar(
          title: 'Venue Not Found',
          showBackButton: true,
        ),
        body: Center(
          child: Text('Venue not found'),
        ),
      );
    }

    return Scaffold(
      body: NestedScrollView(
        headerSliverBuilder: (context, innerBoxIsScrolled) {
          return [
            SliverAppBar(
              expandedHeight: 300,
              pinned: true,
              backgroundColor: AppTheme.moroccoGreen,
              flexibleSpace: FlexibleSpaceBar(
                title: Text(
                  venue.name,
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                background: Stack(
                  fit: StackFit.expand,
                  children: [
                    // Venue image placeholder
                    DecoratedBox(
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          begin: Alignment.topCenter,
                          end: Alignment.bottomCenter,
                          colors: [
                            _getCategoryColor(venue.category),
                            _getCategoryColor(venue.category).withValues(alpha: 0.8),
                          ],
                        ),
                      ),
                      child: Center(
                        child: Text(
                          _getCategoryIcon(venue.category),
                          style: const TextStyle(fontSize: 80),
                        ),
                      ),
                    ),
                    // Gradient overlay
                    Container(
                      decoration: BoxDecoration(
                        gradient: LinearGradient(
                          begin: Alignment.topCenter,
                          end: Alignment.bottomCenter,
                          colors: [
                            Colors.transparent,
                            Colors.black.withValues(alpha: 0.7),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              actions: [
                IconButton(
                  onPressed: _toggleBookmark,
                  icon: Icon(
                    _isBookmarked ? Icons.bookmark : Icons.bookmark_border,
                    color: Colors.white,
                  ),
                ),
                IconButton(
                  onPressed: _shareVenue,
                  icon: const Icon(Icons.share, color: Colors.white),
                ),
              ],
            ),
          ];
        },
        body: Column(
          children: [
            // Venue basic info
            Container(
              padding: const EdgeInsets.all(16),
              color: Colors.white,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              venue.type,
                              style: const TextStyle(
                                fontSize: 16,
                                color: AppTheme.secondaryText,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                            const SizedBox(height: 4),
                            Row(
                              children: [
                                const Icon(
                                  Icons.location_on,
                                  size: 16,
                                  color: AppTheme.secondaryText,
                                ),
                                const SizedBox(width: 4),
                                Text(
                                  venue.location,
                                  style: const TextStyle(
                                    fontSize: 14,
                                    color: AppTheme.secondaryText,
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),
                      Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 12,
                          vertical: 6,
                        ),
                        decoration: BoxDecoration(
                          color: _getCategoryColor(venue.category),
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            const Icon(
                              Icons.star,
                              size: 16,
                              color: Colors.white,
                            ),
                            const SizedBox(width: 4),
                            Text(
                              venue.rating.toStringAsFixed(1),
                              style: const TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  // Quick action buttons
                  Row(
                    children: [
                      Expanded(
                        child: OutlinedButton.icon(
                          onPressed: _callVenue,
                          icon: const Icon(Icons.phone, size: 20),
                          label: const Text('Call'),
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: OutlinedButton.icon(
                          onPressed: _getDirections,
                          icon: const Icon(Icons.directions, size: 20),
                          label: const Text('Directions'),
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: _showBookingOptions,
                          icon: const Icon(Icons.book_online, size: 20),
                          label: const Text('Book'),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            
            // Tab bar
            ColoredBox(
              color: Colors.white,
              child: TabBar(
                controller: _tabController,
                labelColor: AppTheme.moroccoGreen,
                unselectedLabelColor: AppTheme.secondaryText,
                indicatorColor: AppTheme.moroccoGreen,
                tabs: const [
                  Tab(text: 'Overview'),
                  Tab(text: 'Deals'),
                  Tab(text: 'Reviews'),
                  Tab(text: 'Info'),
                ],
              ),
            ),
            
            // Tab content
            Expanded(
              child: TabBarView(
                controller: _tabController,
                children: [
                  _buildOverviewTab(venue),
                  _buildDealsTab(venue),
                  _buildReviewsTab(venue),
                  _buildInfoTab(venue),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  dynamic _getVenueById(String venueId) {
    try {
      return MockData.venues.firstWhere((venue) => venue.id == venueId);
    } catch (e) {
      return null;
    }
  }

  Color _getCategoryColor(String category) {
    switch (category) {
      case 'food':
        return AppColors.foodCategory;
      case 'entertainment':
        return AppColors.entertainmentCategory;
      case 'wellness':
        return AppColors.wellnessCategory;
      case 'sports':
        return AppColors.sportsCategory;
      default:
        return AppTheme.moroccoGreen;
    }
  }

  String _getCategoryIcon(String category) {
    switch (category) {
      case 'food':
        return '🍕';
      case 'entertainment':
        return '🎮';
      case 'wellness':
        return '💆';
      case 'sports':
        return '⚽';
      default:
        return '🏪';
    }
  }

  Widget _buildOverviewTab(dynamic venue) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Description
          const Text(
            'About',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 8),
          Text(
            venue.description,
            style: const TextStyle(
              fontSize: 16,
              height: 1.5,
            ),
          ),
          const SizedBox(height: 24),
          
          // Features
          const Text(
            'Features',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: _getVenueFeatures().map((feature) {
              return Chip(
                label: Text(feature),
                backgroundColor: AppTheme.moroccoGreen.withValues(alpha: 0.1),
              );
            }).toList(),
          ),
          const SizedBox(height: 24),
          
          // Hours
          const Text(
            'Hours',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 12),
          _buildHoursWidget(),
          const SizedBox(height: 24),
          
          // Cultural information
          if (_shouldShowCulturalInfo(venue.category))
            _buildCulturalInfoWidget(venue),
          
          // Social validation section
          _buildSocialValidationSection(venue),
        ],
      ),
    );
  }

  Widget _buildDealsTab(dynamic venue) {
    final venueDeals = MockData.deals
        .where((deal) => deal.venueId == venue.id)
        .toList();

    if (venueDeals.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.local_offer_outlined,
              size: 64,
              color: AppTheme.lightText,
            ),
            SizedBox(height: 16),
            Text(
              'No active deals',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.w600,
                color: AppTheme.secondaryText,
              ),
            ),
            SizedBox(height: 8),
            Text(
              'Check back later for great offers',
              style: TextStyle(
                fontSize: 14,
                color: AppTheme.lightText,
              ),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.all(8),
      itemCount: venueDeals.length,
      itemBuilder: (context, index) {
        return DealCard(
          deal: venueDeals[index],
          onTap: () => _showDealDetails(venueDeals[index]),
        );
      },
    );
  }

  Widget _buildReviewsTab(dynamic venue) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Rating summary
          Row(
            children: [
              Text(
                venue.rating.toStringAsFixed(1),
                style: const TextStyle(
                  fontSize: 48,
                  fontWeight: FontWeight.bold,
                  color: AppTheme.moroccoGreen,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: List.generate(5, (index) {
                        return Icon(
                          index < venue.rating.floor()
                              ? Icons.star
                              : Icons.star_border,
                          color: Colors.amber,
                          size: 20,
                        );
                      }),
                    ),
                    const SizedBox(height: 4),
                    const Text(
                      '127 reviews',
                      style: TextStyle(
                        fontSize: 14,
                        color: AppTheme.secondaryText,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 24),
          
          // Sample reviews
          ..._buildSampleReviews(),
        ],
      ),
    );
  }

  Widget _buildInfoTab(dynamic venue) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildInfoSection('Contact', [
            _buildInfoRow(Icons.phone, 'Phone', '+212 5XX-XXXXXX'),
            _buildInfoRow(Icons.email, 'Email', 'info@${venue.name.toLowerCase().replaceAll(' ', '')}.ma'),
            _buildInfoRow(Icons.language, 'Website', 'www.${venue.name.toLowerCase().replaceAll(' ', '')}.ma'),
          ]),
          
          const SizedBox(height: 24),
          
          _buildInfoSection('Location', [
            _buildInfoRow(Icons.location_on, 'Address', venue.location),
            _buildInfoRow(Icons.directions, 'Distance', '1.2 km away'),
            _buildInfoRow(Icons.local_parking, 'Parking', 'Available'),
          ]),
          
          const SizedBox(height: 24),
          
          _buildInfoSection('Payment & Booking', [
            _buildInfoRow(Icons.payment, 'Payment', 'Cash, Card, Mobile'),
            _buildInfoRow(Icons.book_online, 'Booking', 'Required for deals'),
            _buildInfoRow(Icons.cancel, 'Cancellation', 'Free up to 2 hours before'),
          ]),
          
          const SizedBox(height: 24),
          
          _buildCulturalTimingSection(),
        ],
      ),
    );
  }

  Widget _buildInfoSection(String title, List<Widget> items) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        ...items,
      ],
    );
  }

  Widget _buildInfoRow(IconData icon, String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Row(
        children: [
          Icon(
            icon,
            size: 20,
            color: AppTheme.secondaryText,
          ),
          const SizedBox(width: 12),
          Text(
            label,
            style: const TextStyle(
              fontSize: 14,
              color: AppTheme.secondaryText,
              fontWeight: FontWeight.w500,
            ),
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(
                fontSize: 14,
                color: AppTheme.primaryText,
              ),
              textAlign: TextAlign.end,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCulturalTimingSection() {
    final prayerTimes = _culturalCalendar.getFormattedPrayerTimes();
    final nextPrayer = _culturalCalendar.getNextPrayer();
    final isRamadan = _culturalCalendar.isRamadan();
    final todaysHoliday = _culturalCalendar.getTodaysHoliday();
    final businessHours = _culturalCalendar.getCulturalBusinessHours();
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          '🕌 Cultural Timing',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        
        // Islamic date and special occasions
        if (todaysHoliday != null || isRamadan)
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(12),
            margin: const EdgeInsets.only(bottom: 12),
            decoration: BoxDecoration(
              color: AppTheme.moroccoGreen.withValues(alpha: 0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: AppTheme.moroccoGreen.withValues(alpha: 0.3)),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                if (todaysHoliday != null)
                  Text(
                    '🎉 Today: $todaysHoliday',
                    style: const TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: AppTheme.moroccoGreen,
                    ),
                  ),
                if (isRamadan)
                  const Text(
                    '🌙 Ramadan Schedule Active',
                    style: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w600,
                      color: AppTheme.moroccoGreen,
                    ),
                  ),
                const SizedBox(height: 4),
                Text(
                  _culturalCalendar.getIslamicDate(),
                  style: TextStyle(
                    fontSize: 12,
                    color: AppTheme.moroccoGreen.withValues(alpha: 0.8),
                  ),
                ),
              ],
            ),
          ),
        
        // Next prayer info
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(12),
          margin: const EdgeInsets.only(bottom: 12),
          decoration: BoxDecoration(
            color: Colors.blue.shade50,
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: Colors.blue.shade200),
          ),
          child: Row(
            children: [
              const Icon(Icons.access_time, color: Colors.blue, size: 20),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  'Next Prayer: ${nextPrayer.keys.first} at ${nextPrayer.values.first}',
                  style: const TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                    color: Colors.blue,
                  ),
                ),
              ),
            ],
          ),
        ),
        
        // Prayer times grid
        Container(
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.grey.shade50,
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: Colors.grey.shade300),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Today\'s Prayer Times:',
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                ),
              ),
              const SizedBox(height: 8),
              Wrap(
                spacing: 8,
                runSpacing: 4,
                children: prayerTimes.map((prayer) => Chip(
                  label: Text(
                    '${prayer['name']} ${prayer['time']}',
                    style: const TextStyle(fontSize: 12),
                  ),
                  backgroundColor: Colors.white,
                  side: BorderSide(color: Colors.grey.shade300),
                )).toList(),
              ),
            ],
          ),
        ),
        
        const SizedBox(height: 12),
        
        // Cultural business recommendations
        if (businessHours['note'] != null)
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.orange.shade50,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.orange.shade200),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.info_outline, color: Colors.orange.shade700, size: 16),
                    const SizedBox(width: 8),
                    const Expanded(
                      child: Text(
                        'Cultural Timing Advice:',
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 6),
                Text(
                  businessHours['note']!,
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.orange.shade700,
                  ),
                ),
                if (businessHours['recommended_hours'] != null) ...[
                  const SizedBox(height: 4),
                  Text(
                    'Recommended hours: ${businessHours['recommended_hours']}',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.orange.shade700,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ],
              ],
            ),
          ),
      ],
    );
  }

  Widget _buildSocialValidationSection(dynamic venue) {
    final checkIns = _socialValidation.getVenueCheckIns(venue.id);
    final socialProof = _socialValidation.getSocialProofSummary(venue.id);
    final friendRecommendation = _socialValidation.getFriendRecommendation(venue.id);
    final trustIndicators = _socialValidation.getTrustIndicators(venue.id);
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const SizedBox(height: 24),
        const Text(
          '👥 Community Validation',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        
        // Trust indicators
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(12),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(8),
            border: Border.all(color: Colors.grey.shade300),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(
                    Icons.verified_user,
                    size: 20,
                    color: _getTrustLevelColor(trustIndicators['trustLevel']),
                  ),
                  const SizedBox(width: 8),
                  Text(
                    trustIndicators['trustLevel'],
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.w600,
                      color: _getTrustLevelColor(trustIndicators['trustLevel']),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Text(
                    '(${socialProof['score'] ?? 'N/A'})',
                    style: const TextStyle(
                      fontSize: 12,
                      color: Colors.grey,
                    ),
                  ),
                  const Spacer(),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: _getTrustLevelColor(trustIndicators['trustLevel']).withValues(alpha: 0.1),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: Text(
                      '${trustIndicators['trustScore'].toInt()}% trust',
                      style: TextStyle(
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                        color: _getTrustLevelColor(trustIndicators['trustLevel']),
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              if (trustIndicators['indicators'].isNotEmpty)
                Wrap(
                  spacing: 6,
                  children: trustIndicators['indicators'].map<Widget>((indicator) => Chip(
                    label: Text(
                      indicator,
                      style: const TextStyle(fontSize: 11),
                    ),
                    backgroundColor: Colors.green.shade50,
                    side: BorderSide(color: Colors.green.shade200),
                  )).toList(),
                ),
            ],
          ),
        ),
        
        const SizedBox(height: 12),
        
        // Friend recommendation if available
        if (friendRecommendation != null) ...[
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.blue.shade50,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.blue.shade200),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    const Icon(Icons.person, color: Colors.blue, size: 16),
                    const SizedBox(width: 6),
                    Text(
                      'Recommended by ${friendRecommendation['friendName']}',
                      style: const TextStyle(
                        fontSize: 14,
                        fontWeight: FontWeight.w600,
                        color: Colors.blue,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 6),
                Text(
                  '"${friendRecommendation['recommendation']}"',
                  style: const TextStyle(
                    fontSize: 13,
                    fontStyle: FontStyle.italic,
                    color: Colors.blue,
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(height: 12),
        ],
        
        // Recent community activity
        if (checkIns.isNotEmpty) ...[
          Container(
            width: double.infinity,
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.grey.shade50,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.grey.shade300),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Recent Community Activity:',
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 8),
                ...checkIns.take(3).map((checkIn) => Container(
                  margin: const EdgeInsets.only(bottom: 8),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Icon(
                        checkIn['isFriend'] ? Icons.person : Icons.account_circle,
                        size: 16,
                        color: checkIn['isFriend'] ? Colors.green : Colors.grey,
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Row(
                              children: [
                                Text(
                                  checkIn['username'],
                                  style: TextStyle(
                                    fontSize: 12,
                                    fontWeight: FontWeight.w600,
                                    color: checkIn['isFriend'] ? Colors.green : Colors.black87,
                                  ),
                                ),
                                const SizedBox(width: 8),
                                Row(
                                  children: List.generate(5, (index) => Icon(
                                    index < checkIn['rating'] ? Icons.star : Icons.star_border,
                                    size: 12,
                                    color: Colors.amber,
                                  )),
                                ),
                              ],
                            ),
                            if (checkIn['comment'].isNotEmpty)
                              Text(
                                checkIn['comment'],
                                style: const TextStyle(
                                  fontSize: 11,
                                  color: Colors.grey,
                                ),
                              ),
                          ],
                        ),
                      ),
                    ],
                  ),
                )),
              ],
            ),
          ),
        ],
      ],
    );
  }

  Color _getTrustLevelColor(String? trustLevel) {
    switch (trustLevel) {
      case 'Highly Trusted':
        return Colors.green;
      case 'Community Trusted':
        return Colors.blue;
      case 'Moderately Trusted':
        return Colors.orange;
      default:
        return Colors.grey;
    }
  }

  List<String> _getVenueFeatures() {
    return [
      'WiFi',
      'Air Conditioning',
      'Parking',
      'Halal Certified',
      'Prayer Room',
      'Family Friendly',
      'Credit Cards',
      'Delivery',
      'Takeaway',
    ];
  }

  Widget _buildHoursWidget() {
    final days = [
      'Monday',
      'Tuesday', 
      'Wednesday',
      'Thursday',
      'Friday',
      'Saturday',
      'Sunday'
    ];
    final hours = [
      '9:00 AM - 11:00 PM',
      '9:00 AM - 11:00 PM',
      '9:00 AM - 11:00 PM',
      '9:00 AM - 11:00 PM',
      '2:00 PM - 11:00 PM', // Friday (after prayer)
      '9:00 AM - 12:00 AM',
      '9:00 AM - 11:00 PM',
    ];

    return Column(
      children: List.generate(days.length, (index) {
        final isToday = DateTime.now().weekday - 1 == index;
        return Padding(
          padding: const EdgeInsets.symmetric(vertical: 4),
          child: Row(
            children: [
              SizedBox(
                width: 80,
                child: Text(
                  days[index],
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: isToday ? FontWeight.bold : FontWeight.normal,
                    color: isToday ? AppTheme.moroccoGreen : AppTheme.primaryText,
                  ),
                ),
              ),
              Expanded(
                child: Text(
                  hours[index],
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: isToday ? FontWeight.bold : FontWeight.normal,
                    color: isToday ? AppTheme.moroccoGreen : AppTheme.secondaryText,
                  ),
                  textAlign: TextAlign.end,
                ),
              ),
            ],
          ),
        );
      }),
    );
  }

  bool _shouldShowCulturalInfo(String category) {
    return category == 'food'; // Show for restaurants
  }

  Widget _buildCulturalInfoWidget(dynamic venue) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'Cultural Information',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 12),
        Container(
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: AppTheme.moroccoGreen.withValues(alpha: 0.1),
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: AppTheme.moroccoGreen.withValues(alpha: 0.3)),
          ),
          child: const Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(
                    Icons.verified,
                    color: AppTheme.moroccoGreen,
                    size: 20,
                  ),
                  SizedBox(width: 8),
                  Text(
                    'Halal Certified',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: AppTheme.moroccoGreen,
                    ),
                  ),
                ],
              ),
              SizedBox(height: 8),
              Text(
                '✓ All food is halal certified\n'
                '✓ Prayer room available\n'
                '✓ Special Ramadan menu during holy month\n'
                '✓ Adjusted hours during prayer times',
                style: TextStyle(
                  fontSize: 14,
                  color: AppTheme.primaryText,
                  height: 1.4,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  List<Widget> _buildSampleReviews() {
    final reviews = [
      {
        'name': 'Ahmed K.',
        'rating': 5,
        'time': '2 days ago',
        'comment': 'Excellent food and great atmosphere! The deals during dead hours are amazing value.',
      },
      {
        'name': 'Sarah M.',
        'rating': 4,
        'time': '1 week ago',
        'comment': 'Love the halal options and the staff is very friendly. Perfect for families.',
      },
      {
        'name': 'Tourist_Guide',
        'rating': 5,
        'time': '2 weeks ago',
        'comment': 'Discovered this place through the community. Authentic Moroccan experience!',
      },
    ];

    return reviews.map((review) {
      return Container(
        margin: const EdgeInsets.only(bottom: 16),
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(12),
          border: Border.all(color: Colors.grey.shade200),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                CircleAvatar(
                  radius: 20,
                  backgroundColor: AppTheme.moroccoGreen,
                  child: Text(
                    review['name'].toString().substring(0, 1),
                    style: const TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        review['name'] as String,
                        style: const TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Row(
                        children: [
                          ...List.generate(5, (index) {
                            return Icon(
                              index < (review['rating'] as int)
                                  ? Icons.star
                                  : Icons.star_border,
                              color: Colors.amber,
                              size: 16,
                            );
                          }),
                          const SizedBox(width: 8),
                          Text(
                            review['time'] as String,
                            style: const TextStyle(
                              fontSize: 12,
                              color: AppTheme.secondaryText,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              review['comment'] as String,
              style: const TextStyle(
                fontSize: 14,
                height: 1.4,
              ),
            ),
          ],
        ),
      );
    }).toList();
  }

  void _toggleBookmark() {
    setState(() {
      _isBookmarked = !_isBookmarked;
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          _isBookmarked ? 'Venue saved to bookmarks' : 'Venue removed from bookmarks',
        ),
        backgroundColor: _isBookmarked ? AppColors.success : AppTheme.secondaryText,
      ),
    );
  }

  void _shareVenue() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Venue shared successfully!'),
        backgroundColor: AppColors.info,
      ),
    );
  }

  void _callVenue() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Opening phone app...'),
        backgroundColor: AppColors.info,
      ),
    );
  }

  void _getDirections() {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Opening maps app...'),
        backgroundColor: AppColors.info,
      ),
    );
  }

  void _showBookingOptions() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.6,
        maxChildSize: 0.9,
        minChildSize: 0.4,
        builder: (context, scrollController) {
          return Container(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Center(
                  child: Container(
                    width: 40,
                    height: 4,
                    decoration: BoxDecoration(
                      color: Colors.grey.shade300,
                      borderRadius: BorderRadius.circular(2),
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                const Text(
                  'Booking Options',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 16),
                
                ListTile(
                  leading: const Icon(Icons.local_offer, color: AppTheme.moroccoGreen),
                  title: const Text('Book a Deal'),
                  subtitle: const Text('Save money with current offers'),
                  onTap: () {
                    Navigator.pop(context);
                    _tabController.animateTo(1); // Switch to deals tab
                  },
                ),
                
                ListTile(
                  leading: const Icon(Icons.restaurant, color: AppTheme.moroccoGreen),
                  title: const Text('Regular Booking'),
                  subtitle: const Text('Book at regular prices'),
                  onTap: () {
                    Navigator.pop(context);
                    _showRegularBooking();
                  },
                ),
                
                ListTile(
                  leading: const Icon(Icons.group, color: AppTheme.moroccoGreen),
                  title: const Text('Group Booking'),
                  subtitle: const Text('Book for 6+ people'),
                  onTap: () {
                    Navigator.pop(context);
                    _showGroupBooking();
                  },
                ),
                
                const SizedBox(height: 24),
                SizedBox(
                  width: double.infinity,
                  child: OutlinedButton(
                    onPressed: () => Navigator.pop(context),
                    child: const Text('Cancel'),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  void _showRegularBooking() {
    if (!AuthHelpers.requireAuthForBooking(context, ref)) {
      return;
    }
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Regular Booking'),
        content: const Text('Would you like to make a regular booking at standard prices?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('Booking request sent! We\'ll contact you shortly.'),
                  backgroundColor: AppColors.success,
                ),
              );
            },
            child: const Text('Book Now'),
          ),
        ],
      ),
    );
  }

  void _showGroupBooking() {
    if (!AuthHelpers.requireAuthForBooking(context, ref)) {
      return;
    }
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Group Booking'),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Group booking for 6+ people'),
            SizedBox(height: 8),
            Text('Special group rates may apply. How many people?'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('Group booking request sent! We\'ll contact you for details.'),
                  backgroundColor: AppColors.success,
                ),
              );
            },
            child: const Text('Request Quote'),
          ),
        ],
      ),
    );
  }

  void _showDealDetails(dynamic deal) {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.7,
        maxChildSize: 0.9,
        minChildSize: 0.5,
        builder: (context, scrollController) {
          return Container(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Center(
                  child: Container(
                    width: 40,
                    height: 4,
                    decoration: BoxDecoration(
                      color: Colors.grey.shade300,
                      borderRadius: BorderRadius.circular(2),
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                Text(
                  deal.title,
                  style: const TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  deal.description,
                  style: const TextStyle(
                    fontSize: 16,
                    color: AppTheme.secondaryText,
                  ),
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    Text(
                      '${deal.discountedPrice.toInt()} MAD',
                      style: const TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: AppTheme.moroccoGreen,
                      ),
                    ),
                    const SizedBox(width: 12),
                    Text(
                      '${deal.originalPrice.toInt()} MAD',
                      style: const TextStyle(
                        fontSize: 18,
                        color: AppTheme.lightText,
                        decoration: TextDecoration.lineThrough,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: deal.isValid ? () => _bookDeal(deal) : null,
                    style: ElevatedButton.styleFrom(
                      padding: const EdgeInsets.symmetric(vertical: 16),
                    ),
                    child: Text(
                      deal.isValid ? 'Book This Deal' : 'Deal Expired',
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  void _bookDeal(dynamic deal) {
    Navigator.pop(context);
    
    if (!AuthHelpers.requireAuthForBooking(context, ref)) {
      return;
    }
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Deal Booking'),
        content: Text('Book this deal at ${deal.discountedPrice.toInt()} MAD?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('Deal booked successfully! Check your email for confirmation.'),
                  backgroundColor: AppColors.success,
                ),
              );
            },
            child: const Text('Confirm'),
          ),
        ],
      ),
    );
  }
}