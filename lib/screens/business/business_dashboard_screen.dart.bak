import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:deadhour/utils/theme.dart';
import 'package:deadhour/services/auth_service.dart';

import 'package:deadhour/screens/business/widgets/business_header.dart';
import 'package:deadhour/screens/business/widgets/overview_tab.dart';
import 'package:deadhour/screens/business/widgets/deals_tab.dart';
import 'package:deadhour/screens/business/widgets/analytics_tab.dart';
import 'package:deadhour/screens/business/widgets/settings_tab.dart';

class BusinessDashboardScreen extends StatefulWidget {
  const BusinessDashboardScreen({super.key});

  @override
  State<BusinessDashboardScreen> createState() =>
      _BusinessDashboardScreenState();
}

class _BusinessDashboardScreenState extends State<BusinessDashboardScreen>
    with TickerProviderStateMixin {
  late TabController _tabController;

  final List<Tab> _tabs = [
    const Tab(text: 'Overview'),
    const Tab(text: 'Deals'),
    const Tab(text: 'Analytics'),
    const Tab(text: 'Settings'),
  ];

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: _tabs.length, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: _buildAppBar(),
      body: Column(
        children: [
          // Business info header
          const BusinessHeader(),

          // Tab bar
          TabBar(
            controller: _tabController,
            labelColor: AppTheme.moroccoGreen,
            unselectedLabelColor: AppTheme.secondaryText,
            indicatorColor: AppTheme.moroccoGreen,
            tabs: _tabs,
          ),

          // Tab views
          Expanded(
            child: TabBarView(
              controller: _tabController,
              children: [
                OverviewTab(
                  handleActivityTap: _handleActivityTap,
                  createNewDeal: _createNewDeal,
                  tabController: _tabController,
                ),
                DealsTab(
                  editDeal: _editDeal,
                  viewDealAnalytics: _viewDealAnalytics,
                ),
                const AnalyticsTab(),
                SettingsTab(
                  showPremiumUpgrade: _showPremiumUpgrade,
                  signOut: _signOut,
                ),
              ],
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton.extended(
        heroTag: 'businessCreateDealFAB',
        onPressed: _createNewDeal,
        backgroundColor: AppTheme.moroccoGreen,
        icon: const Icon(Icons.add),
        label: const Text('Create Deal'),
      ),
    );
  }

  PreferredSizeWidget _buildAppBar() {
    return AppBar(
      title: const Text(
        'Business Dashboard',
        style: TextStyle(
          fontSize: 20,
          fontWeight: FontWeight.bold,
        ),
      ),
      actions: [
        IconButton(
          onPressed: _showNotifications,
          icon: Stack(
            children: [
              const Icon(Icons.notifications_outlined),
              Positioned(
                right: 0,
                top: 0,
                child: Container(
                  width: 8,
                  height: 8,
                  decoration: const BoxDecoration(
                    color: AppColors.error,
                    shape: BoxShape.circle,
                  ),
                ),
              ),
            ],
          ),
        ),
        IconButton(
          onPressed: _showBusinessMenu,
          icon: const Icon(Icons.more_vert),
        ),
      ],
    );
  }

  void _handleActivityTap() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.6,
        maxChildSize: 0.9,
        minChildSize: 0.3,
        builder: (context, scrollController) {
          return Container(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Recent Activity',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 16),
                Expanded(
                  child: ListView.builder(
                    controller: scrollController,
                    itemCount: 10, // Mock data
                    itemBuilder: (context, index) {
                      return ListTile(
                        leading: CircleAvatar(
                          child: Icon(_getActivityIcon(index)),
                        ),
                        title: Text(_getActivityTitle(index)),
                        subtitle: Text(_getActivitySubtitle(index)),
                        trailing: Text(_getActivityTime(index)),
                      );
                    },
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  IconData _getActivityIcon(int index) {
    final icons = [
      Icons.person_add,
      Icons.shopping_cart,
      Icons.star,
      Icons.message,
      Icons.analytics,
    ];
    return icons[index % icons.length];
  }

  String _getActivityTitle(int index) {
    final titles = [
      'New customer booking',
      'Deal order completed',
      'Review received',
      'Customer message',
      'Analytics update',
    ];
    return titles[index % titles.length];
  }

  String _getActivitySubtitle(int index) {
    final subtitles = [
      'Table for 4 at 15:30',
      '20% off lunch special',
      '5 stars from Ahmed K.',
      'Question about menu',
      'Weekly performance report',
    ];
    return subtitles[index % subtitles.length];
  }

  String _getActivityTime(int index) {
    final times = ['2m ago', '15m ago', '1h ago', '3h ago', '1d ago'];
    return times[index % times.length];
  }

  void _createNewDeal() {
    context.go('/business/create-deal');
  }

  void _editDeal() {
    // Navigate to edit deal screen with existing deal data
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Edit Deal'),
        content: const Text('Select a deal to edit:'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              // Navigate to create deal screen in edit mode
              context.go('/business/create-deal?mode=edit&id=mock_deal_1');
            },
            child: const Text('Edit Current Deal'),
          ),
        ],
      ),
    );
  }

  void _viewDealAnalytics() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.7,
        maxChildSize: 0.9,
        minChildSize: 0.4,
        builder: (context, scrollController) {
          return Container(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Deal Analytics',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 16),
                Expanded(
                  child: ListView(
                    controller: scrollController,
                    children: [
                      _buildAnalyticsCard('Total Views', '1,234', Icons.visibility, Colors.blue),
                      _buildAnalyticsCard('Bookings', '67', Icons.shopping_cart, Colors.green),
                      _buildAnalyticsCard('Revenue', 'MAD 3,450', Icons.monetization_on, Colors.orange),
                      _buildAnalyticsCard('Conversion Rate', '5.4%', Icons.trending_up, Colors.purple),
                      _buildAnalyticsCard('Average Rating', '4.7', Icons.star, Colors.amber),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildAnalyticsCard(String title, String value, IconData icon, Color color) {
    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            CircleAvatar(
              backgroundColor: color.withValues(alpha: 0.1),
              child: Icon(icon, color: color),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: const TextStyle(
                      fontSize: 14,
                      color: Colors.grey,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    value,
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showPremiumUpgrade() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.7,
        maxChildSize: 0.9,
        minChildSize: 0.4,
        builder: (context, scrollController) {
          return Container(
            padding: const EdgeInsets.all(20),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Row(
                  children: [
                    Icon(Icons.star, color: Colors.amber, size: 28),
                    SizedBox(width: 12),
                    Text(
                      'Upgrade to Premium',
                      style: TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 20),
                Expanded(
                  child: ListView(
                    controller: scrollController,
                    children: [
                      _buildPremiumFeature(
                        'Advanced Analytics',
                        'Detailed insights, competitor analysis, and custom reports',
                        Icons.analytics,
                        Colors.blue,
                      ),
                      _buildPremiumFeature(
                        'Priority Support',
                        '24/7 dedicated support with priority response times',
                        Icons.support_agent,
                        Colors.green,
                      ),
                      _buildPremiumFeature(
                        'Enhanced Marketing Tools',
                        'Social media integration, promotional campaigns, and targeting',
                        Icons.campaign,
                        Colors.orange,
                      ),
                      _buildPremiumFeature(
                        'Multiple Locations',
                        'Manage multiple venues from a single dashboard',
                        Icons.location_on,
                        Colors.red,
                      ),
                      const SizedBox(height: 20),
                      Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: Colors.amber.withValues(alpha: 0.1),
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(color: Colors.amber),
                        ),
                        child: const Column(
                          children: [
                            Text(
                              'Premium Business Plan',
                              style: TextStyle(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            SizedBox(height: 8),
                            Text(
                              'MAD 299/month',
                              style: TextStyle(
                                fontSize: 32,
                                fontWeight: FontWeight.bold,
                                color: Colors.green,
                              ),
                            ),
                            Text(
                              'Cancel anytime • 30-day free trial',
                              style: TextStyle(color: Colors.grey),
                            ),
                          ],
                        ),
                      ),
                      const SizedBox(height: 20),
                      ElevatedButton(
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.amber,
                          foregroundColor: Colors.black,
                          padding: const EdgeInsets.symmetric(vertical: 16),
                        ),
                        onPressed: () {
                          Navigator.pop(context);
                          context.go('/roles/premium');
                          debugPrint('Navigating to premium subscription');
                        },
                        child: const Text(
                          'Start Free Trial',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildPremiumFeature(String title, String description, IconData icon, Color color) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Row(
        children: [
          CircleAvatar(
            backgroundColor: color.withValues(alpha: 0.1),
            child: Icon(icon, color: color),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  title,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  description,
                  style: const TextStyle(
                    color: Colors.grey,
                    fontSize: 14,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _signOut() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Sign Out'),
        content: const Text('Are you sure you want to sign out of your business account?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
            ),
            onPressed: () async {
              Navigator.pop(context);
              // Clear user session and navigate to auth screen
              try {
                await AuthService().logout();
                debugPrint('User signed out from business dashboard');
                context.go('/auth/login');
              } catch (e) {
                debugPrint('Logout error: $e');
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('Error signing out. Please try again.'),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            child: const Text('Sign Out'),
          ),
        ],
      ),
    );
  }

  void _showNotifications() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.6,
        maxChildSize: 0.9,
        minChildSize: 0.3,
        builder: (context, scrollController) {
          return Container(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    const Icon(Icons.notifications, size: 24),
                    const SizedBox(width: 12),
                    const Text(
                      'Business Notifications',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const Spacer(),
                    IconButton(
                      onPressed: () => Navigator.pop(context),
                      icon: const Icon(Icons.close),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                Expanded(
                  child: ListView.builder(
                    controller: scrollController,
                    itemCount: 8, // Mock data
                    itemBuilder: (context, index) {
                      return _buildNotificationItem(index);
                    },
                  ),
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: OutlinedButton(
                        onPressed: () {
                          Navigator.pop(context);
                          debugPrint('Mark all as read');
                        },
                        child: const Text('Mark All Read'),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: ElevatedButton(
                        onPressed: () {
                          Navigator.pop(context);
                          debugPrint('Navigate to full notifications');
                        },
                        child: const Text('View All'),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildNotificationItem(int index) {
    final notifications = [
      {
        'title': 'New booking received',
        'message': 'Table for 4 at 19:30 tonight',
        'time': '2 minutes ago',
        'icon': Icons.book_online,
        'color': Colors.green,
        'unread': true,
      },
      {
        'title': 'Deal performance update',
        'message': 'Your lunch special is trending',
        'time': '1 hour ago',
        'icon': Icons.trending_up,
        'color': Colors.blue,
        'unread': true,
      },
      {
        'title': 'Customer review',
        'message': '5-star review from Ahmed K.',
        'time': '3 hours ago',
        'icon': Icons.star,
        'color': Colors.amber,
        'unread': false,
      },
      {
        'title': 'Payment received',
        'message': 'MAD 156 from recent booking',
        'time': '5 hours ago',
        'icon': Icons.payment,
        'color': Colors.green,
        'unread': false,
      },
    ];

    final notification = notifications[index % notifications.length];
    
    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      child: ListTile(
        leading: CircleAvatar(
          backgroundColor: (notification['color'] as Color).withValues(alpha: 0.1),
          child: Icon(
            notification['icon'] as IconData,
            color: notification['color'] as Color,
          ),
        ),
        title: Text(
          notification['title'] as String,
          style: TextStyle(
            fontWeight: (notification['unread'] as bool) ? FontWeight.bold : FontWeight.normal,
          ),
        ),
        subtitle: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(notification['message'] as String),
            const SizedBox(height: 4),
            Text(
              notification['time'] as String,
              style: const TextStyle(
                fontSize: 12,
                color: Colors.grey,
              ),
            ),
          ],
        ),
        trailing: (notification['unread'] as bool)
            ? Container(
                width: 8,
                height: 8,
                decoration: const BoxDecoration(
                  color: Colors.blue,
                  shape: BoxShape.circle,
                ),
              )
            : null,
        onTap: () {
          debugPrint('Notification tapped: ${notification['title']}');
        },
      ),
    );
  }

  void _showBusinessMenu() {
    showModalBottomSheet(
      context: context,
      builder: (context) => Container(
        padding: const EdgeInsets.all(20),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Business Menu',
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 20),
            _buildMenuOption(
              'Venue Settings',
              'Manage venue information, hours, and preferences',
              Icons.store,
              () {
                Navigator.pop(context);
                debugPrint('Navigate to venue settings');
              },
            ),
            _buildMenuOption(
              'Staff Management',
              'Add and manage staff accounts and permissions',
              Icons.people,
              () {
                Navigator.pop(context);
                debugPrint('Navigate to staff management');
              },
            ),
            _buildMenuOption(
              'Payment & Billing',
              'View subscription, billing history, and payment methods',
              Icons.payment,
              () {
                Navigator.pop(context);
                debugPrint('Navigate to payment settings');
              },
            ),
            _buildMenuOption(
              'Marketing Tools',
              'Promotional campaigns, social media, and advertising',
              Icons.campaign,
              () {
                Navigator.pop(context);
                debugPrint('Navigate to marketing tools');
              },
            ),
            _buildMenuOption(
              'Reports & Export',
              'Download detailed reports and export data',
              Icons.file_download,
              () {
                Navigator.pop(context);
                debugPrint('Navigate to reports');
              },
            ),
            _buildMenuOption(
              'Help & Support',
              'Get help, contact support, or access documentation',
              Icons.help,
              () {
                Navigator.pop(context);
                debugPrint('Navigate to help center');
              },
            ),
            const SizedBox(height: 10),
          ],
        ),
      ),
    );
  }

  Widget _buildMenuOption(String title, String subtitle, IconData icon, VoidCallback onTap) {
    return ListTile(
      leading: CircleAvatar(
        backgroundColor: Colors.grey.withValues(alpha: 0.1),
        child: Icon(icon, color: Colors.grey[700]),
      ),
      title: Text(
        title,
        style: const TextStyle(fontWeight: FontWeight.w600),
      ),
      subtitle: Text(
        subtitle,
        style: const TextStyle(fontSize: 12),
      ),
      trailing: const Icon(Icons.arrow_forward_ios, size: 16),
      onTap: onTap,
    );
  }
}
