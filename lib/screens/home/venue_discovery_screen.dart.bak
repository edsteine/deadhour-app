import 'package:flutter/material.dart';
import 'package:deadhour/utils/theme.dart';
import 'package:deadhour/utils/mock_data.dart';
import 'package:deadhour/models/venue.dart';
// Enhanced app bar removed - handled by MainNavigationScreen
import 'package:deadhour/routes/app_routes.dart';
import 'package:deadhour/services/social_validation_service.dart';
import 'package:deadhour/services/advanced_search_service.dart';

class VenueDiscoveryScreen extends StatefulWidget {
  final String? selectedView; // View passed from AppBar filter
  
  const VenueDiscoveryScreen({super.key, this.selectedView});

  @override
  State<VenueDiscoveryScreen> createState() => _VenueDiscoveryScreenState();
}

class _VenueDiscoveryScreenState extends State<VenueDiscoveryScreen> {
  String _selectedCategory = 'all';
  String _selectedCity = 'all';
  String _sortBy = 'rating';
  String _selectedView = 'list'; // list, map, nearby
  final _socialValidation = SocialValidationService();
  final _advancedSearch = AdvancedSearchService();
  double _maxDistance = 10.0;
  bool _openNowOnly = false;
  String _priceRange = 'all';
  bool _halalOnly = false;
  bool _prayerFriendly = false;
  bool _showCommunityActivity = true;

  @override
  void initState() {
    super.initState();
    // Initialize with view from AppBar filter, default to 'list'
    _selectedView = widget.selectedView ?? 'list_view';
  }

  @override
  void didUpdateWidget(VenueDiscoveryScreen oldWidget) {
    super.didUpdateWidget(oldWidget);
    // Update view when filter changes from AppBar
    if (widget.selectedView != oldWidget.selectedView && widget.selectedView != null) {
      setState(() {
        _selectedView = widget.selectedView!;
      });
    }
  }

  List<Venue> get _filteredVenues {
    // Use advanced search service for comprehensive filtering (search handled by AppBar)
    return _advancedSearch.multiFilterSearch(
      category: _selectedCategory != 'all' ? _selectedCategory : null,
      city: _selectedCity != 'all' ? _selectedCity : null,
      maxDistance: _maxDistance,
      features: [
        if (_halalOnly) 'halal',
        if (_prayerFriendly) 'prayer_friendly',
      ],
      priceRange: _priceRange != 'all' ? _priceRange : null,
      openNow: _openNowOnly ? true : null,
      sortBy: _sortBy,
      limit: 50,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppTheme.backgroundColor,
      // App bar removed - handled by MainNavigationScreen
      body: Column(
        children: [
          // Results summary header only (filters moved to AppBar)
          _buildResultsHeader(),
          // Results content based on selected view (controlled by AppBar filter)
          Expanded(
            child: _buildSelectedView(),
          ),
        ],
      ),
    );
  }



  Widget _buildSelectedView() {
    switch (_selectedView) {
      case 'map_view':
        return _buildMapView();
      case 'nearby':
        return _buildNearbyView();
      case 'list_view':
      default:
        return _buildVenuesList();
    }
  }

  // Method to update view from external source (MainNavigationScreen filter)
  void updateView(String view) {
    setState(() {
      _selectedView = view;
    });
  }

  void _clearAllFilters() {
    setState(() {
      _selectedCategory = 'all';
      _selectedCity = 'all';
      _sortBy = 'rating';
      _maxDistance = 10.0;
      _openNowOnly = false;
      _priceRange = 'all';
      _halalOnly = false;
      _prayerFriendly = false;
      _showCommunityActivity = true;
      // Search clearing handled by AppBar filters
    });
  }


  Widget _buildResultsHeader() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
          bottom: BorderSide(color: Colors.grey.shade200),
        ),
      ),
      child: Row(
        children: [
          Text(
            '${_filteredVenues.length} venues found',
            style: const TextStyle(
              fontSize: 16,
              color: AppTheme.primaryText,
              fontWeight: FontWeight.w600,
            ),
          ),
          const Spacer(),
          // Show active filters indicator if any are applied
          if (_selectedCategory != 'all' || _selectedCity != 'all' || _openNowOnly || _halalOnly || _prayerFriendly)
            Container(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              decoration: BoxDecoration(
                color: AppTheme.moroccoGreen.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Text(
                    'Filters Active',
                    style: TextStyle(
                      fontSize: 12,
                      color: AppTheme.moroccoGreen,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                  const SizedBox(width: 4),
                  GestureDetector(
                    onTap: () => _clearAllFilters(),
                    child: const Icon(
                      Icons.close,
                      size: 16,
                      color: AppTheme.moroccoGreen,
                    ),
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }

  Widget _buildVenuesList() {
    final venues = _filteredVenues;

    if (venues.isEmpty) {
      return _buildEmptyState();
    }

    return ListView.builder(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      itemCount: venues.length,
      itemBuilder: (context, index) {
        return _buildVenueCard(venues[index]);
      },
    );
  }

  Widget _buildVenueCard(Venue venue) {
    final hasActiveDeals = MockData.deals
        .where((deal) => deal.venueId == venue.id && deal.isValid)
        .isNotEmpty;

    return Card(
      margin: const EdgeInsets.only(bottom: 16),
      child: InkWell(
        onTap: () => AppNavigation.goToVenueDetail(context, venue.id),
        borderRadius: BorderRadius.circular(8),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Stack(
              children: [
                ClipRRect(
                  borderRadius:
                      const BorderRadius.vertical(top: Radius.circular(8)),
                  child: Image.network(
                    venue.imageUrl,
                    height: 160,
                    width: double.infinity,
                    fit: BoxFit.cover,
                    errorBuilder: (context, error, stackTrace) => Container(
                      height: 160,
                      color: Colors.grey[300],
                      child: const Icon(Icons.image_not_supported, size: 50),
                    ),
                  ),
                ),
                if (hasActiveDeals)
                  Positioned(
                    top: 8,
                    left: 8,
                    child: Container(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 8, vertical: 4),
                      decoration: BoxDecoration(
                        color: Colors.red,
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: const Text(
                        'DEAL',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
                Positioned(
                  top: 8,
                  right: 8,
                  child: Container(
                    padding:
                        const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                    decoration: BoxDecoration(
                      color: venue.isOpen ? Colors.green : Colors.orange,
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      venue.openingStatus,
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 12,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                ),
              ],
            ),
            Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Text(venue.categoryIcon,
                          style: const TextStyle(fontSize: 20)),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              venue.name,
                              style: const TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            Text(
                              venue.categoryName,
                              style: const TextStyle(
                                fontSize: 14,
                                color: AppTheme.moroccoGreen,
                                fontWeight: FontWeight.w500,
                              ),
                            ),
                          ],
                        ),
                      ),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.end,
                        children: [
                          Row(
                            children: [
                              const Icon(Icons.star,
                                  size: 16, color: Colors.amber),
                              const SizedBox(width: 4),
                              Text(
                                '${venue.rating}',
                                style: const TextStyle(
                                    fontWeight: FontWeight.w600),
                              ),
                            ],
                          ),
                          Text(
                            '${venue.reviewCount} reviews',
                            style: const TextStyle(
                                fontSize: 12, color: Colors.grey),
                          ),
                        ],
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      Icon(Icons.location_on,
                          size: 16, color: Colors.grey[600]),
                      const SizedBox(width: 4),
                      Expanded(
                        child: Text(
                          '${venue.address}, ${venue.city}',
                          style:
                              TextStyle(fontSize: 14, color: Colors.grey[600]),
                          overflow: TextOverflow.ellipsis,
                        ),
                      ),
                      Text(
                        venue.priceRange,
                        style: const TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w600,
                          color: AppTheme.moroccoGreen,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    venue.description,
                    style: const TextStyle(fontSize: 14),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  const SizedBox(height: 12),
                  Wrap(
                    spacing: 8,
                    children: [
                      if (venue.isHalal)
                        _buildAmenityChip('Halal', Icons.restaurant),
                      if (venue.hasWifi) _buildAmenityChip('WiFi', Icons.wifi),
                      if (venue.acceptsCards)
                        _buildAmenityChip('Cards', Icons.credit_card),
                      if (venue.isVerified)
                        _buildAmenityChip('Verified', Icons.verified),
                    ],
                  ),
                  // Community activity indicators
                  if (_showCommunityActivity) ...[
                    const SizedBox(height: 8),
                    _buildCommunityActivity(venue),
                  ],
                  const SizedBox(height: 12),
                  Row(
                    children: [
                      Expanded(
                        child: OutlinedButton.icon(
                          onPressed: () => _viewVenueDetails(venue),
                          icon: const Icon(Icons.info, size: 16),
                          label: const Text('Details'),
                        ),
                      ),
                      const SizedBox(width: 12),
                      Expanded(
                        child: _buildBookingButton(venue, hasActiveDeals),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCommunityActivity(Venue venue) {
    final socialProof = _socialValidation.getSocialProofSummary(venue.id);
    final socialWidgets = _socialValidation.getSocialProofWidgets(venue.id);
    final trustIndicators = _socialValidation.getTrustIndicators(venue.id);
    final checkIns = _socialValidation.getVenueCheckIns(venue.id);
    
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: AppTheme.moroccoGreen.withValues(alpha: 0.05),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: AppTheme.moroccoGreen.withValues(alpha: 0.2),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Header with trust level
          Row(
            children: [
              const Icon(
                Icons.group,
                size: 16,
                color: AppTheme.moroccoGreen,
              ),
              const SizedBox(width: 4),
              const Text(
                'Community Validation',
                style: TextStyle(
                  fontSize: 12,
                  fontWeight: FontWeight.w600,
                  color: AppTheme.moroccoGreen,
                ),
              ),
              const Spacer(),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                decoration: BoxDecoration(
                  color: _getTrustLevelColor(trustIndicators['trustLevel']),
                  borderRadius: BorderRadius.circular(10),
                ),
                child: Text(
                  trustIndicators['trustLevel'],
                  style: const TextStyle(
                    fontSize: 9,
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ],
          ),
          const SizedBox(height: 8),
          
          // Social proof widgets
          if (socialWidgets.isNotEmpty) ...[
            Wrap(
              spacing: 6,
              runSpacing: 4,
              children: socialWidgets.take(2).map((widget) => Container(
                padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                decoration: BoxDecoration(
                  color: _getWidgetColor(widget['color']).withValues(alpha: 0.2),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: _getWidgetColor(widget['color']).withValues(alpha: 0.4),
                  ),
                ),
                child: Text(
                  widget['title'],
                  style: TextStyle(
                    fontSize: 10,
                    color: _getWidgetColor(widget['color']),
                    fontWeight: FontWeight.w600,
                  ),
                ),
              )).toList(),
            ),
            const SizedBox(height: 6),
          ],
          
          // Friend recommendations indicator
          if (socialProof['friendCheckIns'] > 0) ...[
            Row(
              children: [
                Icon(
                  Icons.people,
                  size: 12,
                  color: Colors.green.shade600,
                ),
                const SizedBox(width: 4),
                Expanded(
                  child: Text(
                    '${socialProof['friendNames'].take(2).join(', ')} visited recently',
                    style: TextStyle(
                      fontSize: 11,
                      color: Colors.green.shade600,
                      fontWeight: FontWeight.w500,
                    ),
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 4),
          ],
          
          // Recent activity or community tags
          if (checkIns.isNotEmpty) ...[
            Row(
              children: [
                const Icon(
                  Icons.chat_bubble_outline,
                  size: 12,
                  color: AppTheme.secondaryText,
                ),
                const SizedBox(width: 4),
                Expanded(
                  child: Text(
                    '"${checkIns.first['comment']}"',
                    style: const TextStyle(
                      fontSize: 11,
                      color: AppTheme.secondaryText,
                      fontStyle: FontStyle.italic,
                    ),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
              ],
            ),
          ] else if (socialProof['communityTags'].isNotEmpty) ...[
            Row(
              children: [
                const Icon(
                  Icons.tag,
                  size: 12,
                  color: AppTheme.secondaryText,
                ),
                const SizedBox(width: 4),
                Expanded(
                  child: Text(
                    socialProof['communityTags'].take(3).join(', '),
                    style: const TextStyle(
                      fontSize: 11,
                      color: AppTheme.secondaryText,
                    ),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
              ],
            ),
          ],
        ],
      ),
    );
  }

  Color _getTrustLevelColor(String? trustLevel) {
    switch (trustLevel) {
      case 'Highly Trusted':
        return Colors.green;
      case 'Community Trusted':
        return Colors.blue;
      case 'Moderately Trusted':
        return Colors.orange;
      default:
        return Colors.grey;
    }
  }

  Color _getWidgetColor(String color) {
    switch (color) {
      case 'green':
        return Colors.green;
      case 'orange':
        return Colors.orange;
      case 'blue':
        return Colors.blue;
      case 'purple':
        return Colors.purple;
      default:
        return AppTheme.moroccoGreen;
    }
  }

  Widget _buildBookingButton(Venue venue, bool hasActiveDeals) {
    // Check if venue is good for groups (mock logic)
    final isGroupFriendly = venue.category == 'food' || venue.category == 'entertainment';
    final groupDiscount = isGroupFriendly ? '10% off for 6+ people' : null;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        ElevatedButton.icon(
          onPressed: () => _bookVenue(venue),
          icon: const Icon(Icons.book_online, size: 16),
          label: Text(hasActiveDeals ? 'Book Deal' : 'Book Now'),
          style: ElevatedButton.styleFrom(
            backgroundColor: hasActiveDeals ? Colors.red : AppTheme.moroccoGreen,
            foregroundColor: Colors.white,
          ),
        ),
        if (isGroupFriendly && groupDiscount != null) ...[
          const SizedBox(height: 4),
          GestureDetector(
            onTap: () => _showGroupBookingInfo(venue),
            child: Container(
              padding: const EdgeInsets.symmetric(vertical: 4, horizontal: 8),
              decoration: BoxDecoration(
                color: Colors.orange.shade50,
                borderRadius: BorderRadius.circular(12),
                border: Border.all(color: Colors.orange.shade200),
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Icon(Icons.group, size: 12, color: Colors.orange.shade700),
                  const SizedBox(width: 4),
                  Expanded(
                    child: Text(
                      groupDiscount,
                      style: TextStyle(
                        fontSize: 10,
                        color: Colors.orange.shade700,
                        fontWeight: FontWeight.w500,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ],
    );
  }

  Widget _buildAmenityChip(String label, IconData icon) {
    return Chip(
      label: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 12),
          const SizedBox(width: 4),
          Text(label, style: const TextStyle(fontSize: 10)),
        ],
      ),
      materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
      visualDensity: VisualDensity.compact,
    );
  }

  Widget _buildMapView() {
    return Container(
      color: Colors.grey[200],
      child: const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.map, size: 64, color: Colors.grey),
            SizedBox(height: 16),
            Text(
              'Interactive Map View',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 8),
            Text(
              'Coming Soon - View venues on an interactive map',
              style: TextStyle(color: Colors.grey),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildNearbyView() {
    final nearbyVenues = _filteredVenues.take(5).toList();

    return Column(
      children: [
        Container(
          padding: const EdgeInsets.all(16),
          width: double.infinity,
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              colors: [AppTheme.moroccoGreen, AppTheme.moroccoGold],
            ),
          ),
          child: const Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Venues Near You',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
              SizedBox(height: 4),
              Text(
                'Based on your current location',
                style: TextStyle(fontSize: 14, color: Colors.white70),
              ),
            ],
          ),
        ),
        Expanded(
          child: ListView.builder(
            padding: const EdgeInsets.all(16),
            itemCount: nearbyVenues.length,
            itemBuilder: (context, index) {
              final venue = nearbyVenues[index];
              return Card(
                child: ListTile(
                  leading: CircleAvatar(
                    backgroundImage: NetworkImage(venue.imageUrl),
                  ),
                  title: Text(venue.name),
                  subtitle: Text('${venue.categoryName} • ${venue.city}'),
                  trailing: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          const Icon(Icons.star, size: 16, color: Colors.amber),
                          Text('${venue.rating}'),
                        ],
                      ),
                      const Text('2.3 km', style: TextStyle(fontSize: 12)),
                    ],
                  ),
                  onTap: () => AppNavigation.goToVenueDetail(context, venue.id),
                ),
              );
            },
          ),
        ),
      ],
    );
  }

  Widget _buildEmptyState() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.search_off, size: 64, color: Colors.grey),
          SizedBox(height: 16),
          Text(
            'No venues found',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 8),
          Text(
            'Try adjusting your filters or search criteria',
            style: TextStyle(color: Colors.grey),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }



  void _viewVenueDetails(Venue venue) {
    AppNavigation.goToVenueDetail(context, venue.id);
  }

  void _showGroupBookingInfo(Venue venue) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.group, color: AppTheme.moroccoGreen),
            SizedBox(width: 8),
            Text('Group Booking'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '${venue.name} offers special group rates!',
              style: const TextStyle(fontWeight: FontWeight.w600),
            ),
            const SizedBox(height: 12),
            const Row(
              children: [
                Icon(Icons.people, size: 16, color: AppTheme.moroccoGreen),
                SizedBox(width: 8),
                Text('6+ people: 10% discount'),
              ],
            ),
            const SizedBox(height: 8),
            const Row(
              children: [
                Icon(Icons.people_alt, size: 16, color: AppTheme.moroccoGreen),
                SizedBox(width: 8),
                Text('10+ people: 15% discount'),
              ],
            ),
            const SizedBox(height: 8),
            const Row(
              children: [
                Icon(Icons.schedule, size: 16, color: AppTheme.moroccoGreen),
                SizedBox(width: 8),
                Text('Best rates during dead hours'),
              ],
            ),
            const SizedBox(height: 12),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: AppTheme.moroccoGreen.withValues(alpha: 0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: const Text(
                'Tip: Invite friends from the community for better deals!',
                style: TextStyle(
                  fontSize: 12,
                  fontStyle: FontStyle.italic,
                  color: AppTheme.secondaryText,
                ),
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _bookGroupVenue(venue);
            },
            child: const Text('Book for Group'),
          ),
        ],
      ),
    );
  }

  void _bookGroupVenue(Venue venue) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Group Booking'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('How many people in your group for ${venue.name}?'),
            const SizedBox(height: 16),
            TextFormField(
              decoration: const InputDecoration(
                labelText: 'Number of people',
                hintText: 'Minimum 6 for group rates',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.number,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('Group booking request sent! We\'ll contact you with details.'),
                  backgroundColor: AppColors.success,
                ),
              );
            },
            child: const Text('Request Quote'),
          ),
        ],
      ),
    );
  }

  void _bookVenue(Venue venue) {
    final deals = MockData.deals
        .where((deal) => deal.venueId == venue.id && deal.isValid)
        .toList();

    if (deals.isNotEmpty) {
      _showDealBookingDialog(venue, deals.first);
    } else {
      _showRegularBookingDialog(venue);
    }
  }

  void _showDealBookingDialog(Venue venue, dynamic deal) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Book ${deal.title}'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('At ${venue.name}'),
            const SizedBox(height: 8),
            Text('Original Price: ${deal.originalPrice.toInt()} MAD'),
            Text(
              'Deal Price: ${deal.discountedPrice.toInt()} MAD',
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: AppTheme.moroccoGreen,
              ),
            ),
            const SizedBox(height: 8),
            Text('${deal.availableSpots} spots left'),
            Text('Valid until: ${deal.timeLeftDisplay}'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('Deal booked successfully!'),
                  backgroundColor: Colors.green,
                ),
              );
            },
            child: const Text('Book Deal'),
          ),
        ],
      ),
    );
  }

  void _showRegularBookingDialog(Venue venue) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Book at ${venue.name}'),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              decoration: InputDecoration(
                labelText: 'Number of people',
                hintText: 'How many people?',
              ),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 16),
            TextField(
              decoration: InputDecoration(
                labelText: 'Preferred date & time',
                hintText: 'When would you like to visit?',
              ),
            ),
            SizedBox(height: 16),
            TextField(
              decoration: InputDecoration(
                labelText: 'Special requests',
                hintText: 'Any special requirements?',
              ),
              maxLines: 2,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content:
                      Text('Booking request sent! We\'ll contact you soon.'),
                  backgroundColor: Colors.green,
                ),
              );
            },
            child: const Text('Send Request'),
          ),
        ],
      ),
    );
  }


}

extension StringExtension on String {
  String capitalize() {
    return '${this[0].toUpperCase()}${substring(1)}';
  }
}
